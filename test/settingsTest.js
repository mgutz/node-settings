// Generated by CoffeeScript 1.3.3
(function() {
  var Settings, assert, instance;

  assert = require("chai").assert;

  Settings = require("../lib/settings");

  instance = function() {
    return new Settings(__dirname + "/config/environment");
  };

  describe("Settings", function() {
    it("should get specific environment", function() {
      var settings;
      settings = instance()._obj._useEnvironment('development');
      assert.equal('server_dev', settings.storage.database);
      settings = instance()._obj._useEnvironment();
      assert.equal('server_dev', settings.storage.database);
      settings = instance()._obj._useEnvironment('test');
      assert.equal('server_test', settings.storage.database);
      settings = instance()._obj._useEnvironment('production');
      return assert.equal('server_production', settings.storage.database);
    });
    it("should get value from ancestor if key is not found", function() {
      var settings;
      settings = instance()._obj._useEnvironment('test');
      return assert.equal('password', settings.storage.password);
    });
    it("should have a forceEnv property to force all settings through an environment", function() {
      var environments, set, settings;
      environments = {
        'common': {
          foo: 'boo'
        },
        'development': {
          foo: 'bar'
        },
        'test': {
          foo: 'bah'
        },
        'prod': {
          foo: 'baz'
        },
        forceEnv: 'development'
      };
      settings = new Settings(environments);
      set = settings._obj._useEnvironment('development');
      assert.equal('bar', set.foo);
      set = settings._obj._useEnvironment('test');
      assert.equal('bar', set.foo);
      set = settings._obj._useEnvironment('prod');
      return assert.equal('bar', set.foo);
    });
    it("should replace array values, not merge them", function() {
      var environments, settings;
      environments = {
        'common': {
          arr: [1, 2, 3]
        },
        'development': {
          arr: [4, 5, 6]
        }
      };
      settings = new Settings(environments)._obj._useEnvironment('development');
      return assert.deepEqual([4, 5, 6], settings.arr);
    });
    it("should do a deep merge", function() {
      var environments, settings;
      environments = {
        'common': {
          a: {
            b: {
              c: {
                arr: [1, 2, 3],
                bah: 'baz'
              },
              bar: 'bar'
            }
          }
        },
        'development': {
          a: {
            b: {
              c: {
                arr: [4, 5, 6],
                fu: 'bot'
              }
            }
          }
        }
      };
      settings = new Settings(environments)._obj._useEnvironment('development');
      assert.deepEqual([4, 5, 6], settings.a.b.c.arr);
      assert.deepEqual('baz', settings.a.b.c.bah);
      assert.deepEqual('bar', settings.a.b.bar);
      return assert.deepEqual('bot', settings.a.b.c.fu);
    });
    it("should say which environment is current", function() {
      var settings;
      settings = instance();
      assert.equal('common', settings.ENV);
      settings = new Settings(__dirname + '/config/environment', {
        env: 'production'
      });
      assert.equal('production', settings.ENV);
      settings = instance()._obj._useEnvironment('test');
      return assert.equal('test', settings.ENV);
    });
    it("should accept defaults", function() {
      var environments, options, settings;
      environments = {
        'common': {
          foo: 'boo'
        },
        'development': {
          foo: 'bar'
        }
      };
      options = {
        globalKey: '$settings',
        defaults: {
          framework: {
            views: 'foo/views',
            models: 'foo/models'
          }
        }
      };
      settings = new Settings(environments, options)._obj._useEnvironment('development');
      return assert.equal('foo/views', settings.framework.views);
    });
    it("should be overriden from file", function() {
      var settings;
      settings = instance()._obj._useEnvironment('test');
      assert.equal('server_test', settings.storage.database);
      assert.equal('localhost', settings.storage.host);
      settings._obj.override(__dirname + "/config/override");
      assert.equal('server_test', settings.storage.database);
      assert.equal('override', settings.storage.host);
      settings._obj.override(__dirname + "/config/override2");
      assert.equal('server_test', settings.storage.database);
      return assert.equal('override2', settings.storage.host);
    });
    it("should override with root", function() {
      var settings;
      settings = new Settings(__dirname + '/config/environment', {
        env: 'test'
      });
      assert.equal('server_test', settings.storage.database);
      assert.equal('localhost', settings.storage.host);
      settings._obj.override(__dirname + "/config/overrideRoot", 'fubar');
      assert.equal('server_test', settings.storage.database);
      assert.equal('override', settings.storage.host);
      settings._obj.override(__dirname + "/config/overrideRoot2", 'bar');
      assert.equal('server_test', settings.storage.database);
      return assert.equal('override2', settings.storage.host);
    });
    return it("should handle regex literals", function() {
      var settings;
      settings = new Settings(__dirname + '/config/environment');
      assert.ok(/asdf/ instanceof RegExp);
      return assert.ok(settings.re instanceof RegExp);
    });
  });

}).call(this);
