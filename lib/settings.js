// Generated by CoffeeScript 1.6.2
var Extend, Path, Settings, assert, loadModule;

assert = require('assert');

Extend = require('../support/extend');

Path = require('path');

loadModule = function(pathOrModule) {
  var mod;

  if (typeof pathOrModule === 'string') {
    if (Path.extname(pathOrModule) === '.coffee') {
      require('coffee-script');
    }
    mod = require(pathOrModule);
  } else {
    mod = pathOrModule;
  }
  return mod;
};

Settings = function(pathOrModule, options) {
  this.options = options != null ? options : {};
  if (typeof pathOrModule === 'string') {
    this.path = pathOrModule;
  }
  this.environments = loadModule(pathOrModule);
  this._useEnvironment(this.options.env, this.options.root);
  return this._settings;
};

Settings.prototype._useEnvironment = function(environ, root) {
  var common, result;

  if (environ != null) {
    if (!this.environments[environ]) {
      environ = void 0;
    }
  }
  this.env = this.environments.forceEnv || environ || process.env.NODE_ENV || 'common';
  assert.ok(this.environments.common, 'Environment common not found in: ' + this.path);
  assert.ok(this.environments[this.env], 'Environment `' + this.env + '` not found in: ' + this.path);
  if (this.options.defaults != null) {
    common = Extend.cloneExtend(this.options.defaults, this.environments.common);
  } else {
    common = Extend.clone(this.environments.common);
  }
  if (this.env === 'common') {
    result = common;
  } else {
    result = Extend.extend(common, this.environments[this.env]);
  }
  return this._setSettingsScope(result, root);
};

Settings.prototype.override = function(pathOrModule, root) {
  var mod;

  mod = loadModule(pathOrModule);
  if (mod.common != null) {
    mod = new Settings(mod, {
      env: this.env
    });
    mod._obj = null;
  }
  if (root != null) {
    console.assert(mod[root] != null, "configuration root property not found: " + root);
    mod = mod[root];
  }
  Extend.extend(this._settings, mod);
  return this._settings._obj = this;
};

Settings.prototype._setSettingsScope = function(settings, root) {
  if (root != null) {
    this.root = root;
  }
  this._settings = root != null ? settings[root] : settings;
  this._settings._obj = this;
  this._settings.ENV = this.env;
  return this._settings;
};

module.exports = Settings;
